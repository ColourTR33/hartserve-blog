name: Build & Push blog image

on:
  push:
    branches: [main]
    paths:
      - "**/*.md"
      - "content/**"
      - "assets/**"
      - "layouts/**"
      - "themes/**"
      - "hugo.toml"
      - "Dockerfile"
      - "nginx.conf"
      - ".github/workflows/publish.yml"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/colourtr33/hartserve-blog
  CONTAINER_NAME: hartserve-blog
  HUGO_BASEURL: https://mark.thehartleys.uk/blog/
  HUGO_VERSION: 0.151.0

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          build-args: |
            HUGO_BASEURL=${{ env.HUGO_BASEURL }}
            HUGO_VERSION=${{ env.HUGO_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
 # --- NEW DEPLOYMENT JOB ---
  deploy:
    runs-on: ubuntu-latest
    needs: build # This ensures the build job finishes first
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Log in to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull the latest image
            docker pull ${{ env.IMAGE_NAME }}:latest
            
            # Stop and remove the old container if it exists
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true
            
            # Run the new container
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              -p 80:80 \
              --restart always \
              ${{ env.IMAGE_NAME }}:latest
            
            # Clean up old, unused images
            docker image prune -af